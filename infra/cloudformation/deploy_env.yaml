AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  License: Apache-2.0
Description: "Deploys the environment stack for the C4 Project Boilerplate application."
Parameters:
  EnvId:
    Type: String
    Description: Environment Id (used to namespace resources)
    AllowedPattern: "[a-z][a-z0-9]{2,19}"
    ConstraintDescription: Must be lower case letters between 3 and 20 characters.
  InfraArtifactsBucket:
    Type: String
    Description: The bucket where the infra artifacts are stored (specifically the cloudformation templates).
  InfraReleaseHash:
    Type: String
    Description: The id of the cloudformation templates to use for nested stacks. In CD this will be set to the git sha for the current commi
  ApiImageTag:
    Type: String
    Description: This is the docker image and tag (image:tag) that should be deployed for the api service.
  ReleaseTarget:
    Type: String
    Description: |
      The git branch (or tag) that is being be deployed to this environment.
      This is used for tagging resources in the environment for information and debugging purposes.
  DomainName:
    Type: String
    Description: The domain name for the environment.
  AppReleaseHash:
    Type: String
    Description: The git commit hash of the web application code that is being deployed to this environment.
  AppBucketName:
    Type: String
    Description: The name of the S3 bucket to hold the web application content.


Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref EnvId

  # VpcStack set up VPC with 2 AZs.
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvId: !Ref "EnvId"
        IsDevelopmentGrade: true
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
        - Key: ReleaseTarget
          Value: !Ref "ReleaseTarget"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/aws-cloudformation-templates/core-components/vpc.yaml",
          ],
        ]

  #  RdsStack nested stack deploys the Rds instance..
  RdsStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: [VpcStack]
    Properties:
      Parameters:
        EnvId: !Ref "EnvId"
        IsDevelopmentGrade: true
        VpcId: !GetAtt VpcStack.Outputs.VPC
        SubnetIds:
          !Join [
            ",",
            [
              !GetAtt VpcStack.Outputs.SubnetAPrivate,
              !GetAtt VpcStack.Outputs.SubnetBPrivate,
            ],
          ]
        PublicSubnetIds:
          !Join [
            ",",
            [
              !GetAtt VpcStack.Outputs.SubnetAPublic,
              !GetAtt VpcStack.Outputs.SubnetBPublic,
            ],
          ]
        LambdaS3BucketName: !Ref InfraArtifactsBucket
        LambdaS3KeyPrefix:
          !Join [
            "",
            [
              !Ref InfraReleaseHash,
              "/cloudformation/aws-cloudformation-templates",
            ],
          ]
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/aws-cloudformation-templates/core-components/rds.yaml",
          ],
        ]

  EcsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        EnvId: !Ref "EnvId"
        IsDevelopmentGrade: true
        VpcId: !GetAtt VpcStack.Outputs.VPC
        PrivateSubnetIds:
          !Join [
            ",",
            [
              !GetAtt VpcStack.Outputs.SubnetAPrivate,
              !GetAtt VpcStack.Outputs.SubnetBPrivate,
            ],
          ]
        AdditionalNodeSecurityGroupIds: !GetAtt RdsStack.Outputs.ClientSecurityGroupId
        NumPrivateNodes: 1
        InstanceType: t2.micro
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
        - Key: ReleaseTarget
          Value: !Ref "ReleaseTarget"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/aws-cloudformation-templates/core-components/ecs.yaml",
          ],
        ]

  # WebCert deploys the web certificates.
  WebCert:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref "DomainName"
      SubjectAlternativeNames:
        - !Sub "www.${DomainName}"
        - !Sub "api.${DomainName}"
      ValidationMethod: DNS
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"

  # LoadBalancerStack deploys the default load balancer.
  LoadBalancerStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: [VpcStack, WebCert]
    Properties:
      Parameters:
        EnvId: !Ref "EnvId"
        VPC: !GetAtt VpcStack.Outputs.VPC
        SubnetIds:
          !Join [
            ",",
            [
              !GetAtt VpcStack.Outputs.SubnetAPublic,
              !GetAtt VpcStack.Outputs.SubnetBPublic,
            ],
          ]
        CertificateArn: !Ref WebCert
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/aws-cloudformation-templates/core-components/load_balancer.yaml",
          ],
        ]

  EcsSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt EcsStack.Outputs.EcsSecurityGroupId
      IpProtocol: tcp
      FromPort: 80
      ToPort: 61000
      SourceSecurityGroupId: !GetAtt LoadBalancerStack.Outputs.LoadBalancerSecurityGroupId

  ApiStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VpcStack
      - RdsStack
    Properties:
      Parameters:
        EnvId: !Ref "EnvId"
        Image: !Ref ApiImageTag
        VPC: !GetAtt VpcStack.Outputs.VPC
        LogGroupName: !Ref LogGroup
        ClusterArn: !GetAtt EcsStack.Outputs.ClusterArn
        SubnetIds:
          !Join [
            ",",
            [
              !GetAtt VpcStack.Outputs.SubnetAPrivate,
              !GetAtt VpcStack.Outputs.SubnetBPrivate,
            ],
          ]
        DesiredCount: 1
        DomainName: !Ref DomainName
        LoadBalancerCanonicalHostedZoneID: !GetAtt LoadBalancerStack.Outputs.LoadBalancerCanonicalHostedZoneID
        LoadBalancerDNSName: !GetAtt LoadBalancerStack.Outputs.LoadBalancerDNSName
        HttpsListener: !GetAtt LoadBalancerStack.Outputs.HttpsListener
        DbAdminSecretArn: !GetAtt "RdsStack.Outputs.AdminSecretArn"
        CustomResourcesServiceToken: !GetAtt RdsStack.Outputs.DatabaseInitLambdaArn

      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/services/api.yaml",
          ],
        ]



  AppStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VpcStack
      - RdsStack
    Properties:
      Parameters:
        DomainName: !Ref DomainName
        WebCert: !Ref WebCert
        BucketName: !Ref AppBucketName
        AppReleaseHash: !Ref AppReleaseHash
      Tags:
        - Key: EnvId
          Value: !Ref "EnvId"
      TemplateURL:
        !Join [
          "",
          [
            "https://s3.amazonaws.com/",
            !Ref "InfraArtifactsBucket",
            "/",
            !Ref "InfraReleaseHash",
            "/cloudformation/services/app.yaml",
          ],
        ]


Outputs:
  AppCloudfrontDistributionId:
    Description: The ID of the CloudFront distribution for the web application.
    Value: !GetAtt AppStack.Outputs.CloudfrontDistributionId
