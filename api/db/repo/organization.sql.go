// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organization.sql

package repo

import (
	"context"
)

const getOrganizations = `-- name: GetOrganizations :many
SELECT organization_id, name, location, start_time, end_time FROM organizations
`

func (q *Queries) GetOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.OrganizationID,
			&i.Name,
			&i.Location,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServicesByOrganization = `-- name: GetServicesByOrganization :many
SELECT service_id, organization_id, service_name, service_description, duration FROM services
WHERE organization_id = $1
`

func (q *Queries) GetServicesByOrganization(ctx context.Context, organizationID string) ([]Service, error) {
	rows, err := q.db.Query(ctx, getServicesByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ServiceID,
			&i.OrganizationID,
			&i.ServiceName,
			&i.ServiceDescription,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
